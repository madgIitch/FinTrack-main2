{"mappings":"AAAA,2BAA2B;AAE3B,iCAAiC;AACjC,KAAK,gBAAgB,CAAC,WAAW,CAAA;IAC/B,QAAQ,GAAG,CAAC;IACZ,+CAA+C;IAC/C,KAAK,WAAW;AAClB;AAEA,gCAAgC;AAChC,KAAK,gBAAgB,CAAC,YAAY,CAAA;IAChC,QAAQ,GAAG,CAAC;IACZ,8DAA8D;IAC9D,MAAM,SAAS,CAAC,KAAK,OAAO,CAAC,KAAK;AACpC;AAEA,yCAAyC;AACzC,KAAK,gBAAgB,CAAC,gBAAgB,CAAA;IACpC,IAAI,MAAM,GAAG,KAAK,qBAAqB;QACrC,QAAQ,GAAG,CAAC;QACZ,0CAA0C;QAC1C,MAAM,SAAS,CAAC;IAClB;AACF;AAEA,uFAAuF;AACvF,eAAe;IACb,IAAI;QACF,MAAM,MAAM,MAAM;QAClB,IAAI,CAAC,KAAK;YACR,QAAQ,IAAI,CAAC;YACb;QACF;QAEA,MAAM,SAAS,KAAK,QAAQ,CAAC,QAAQ,KAAK,cACtC,yDACA;QAEJ,MAAM,MAAM,MAAM,MAAM,GAAG,OAAO,kCAAkC,CAAC,EAAE;YACrE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBAAE,QAAQ;YAAI;QACrC;QAEA,IAAI,CAAC,IAAI,EAAE,EACT,QAAQ,KAAK,CAAC,0CAA0C,IAAI,MAAM,EAAE,MAAM,IAAI,IAAI;aAElF,QAAQ,GAAG,CAAC,mDAA6C,MAAM,IAAI,IAAI;IAE3E,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,oDAAiD;IACjE;AACF;AAEA,+DAA+D;AAC/D,SAAS;IACP,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,MAAM,MAAM,UAAU,IAAI,CAAC,eAAe;QAC1C,IAAI,eAAe,GAAG;YACpB,iCAAiC;YACjC,IAAI,MAAM,CAAC,iBAAiB,CAAC;QAC/B;QACA,IAAI,SAAS,GAAG;YACd,MAAM,KAAK,IAAI,MAAM;YACrB,MAAM,KAAK,GAAG,WAAW,CAAC,YAAY;YACtC,MAAM,QAAQ,GAAG,WAAW,CAAC;YAC7B,MAAM,SAAS,MAAM,GAAG,CAAC;YACzB,OAAO,SAAS,GAAG;gBACjB,QAAQ,OAAO,MAAM,IAAI;gBACzB,GAAG,KAAK;YACV;YACA,OAAO,OAAO,GAAG;gBACf,OAAO,OAAO,KAAK;gBACnB,GAAG,KAAK;YACV;QACF;QACA,IAAI,OAAO,GAAG;YACZ,OAAO,IAAI,KAAK;QAClB;IACF;AACF","sources":["service-worker.js"],"sourcesContent":["// public/service-worker.js\n\n// Instalación del Service Worker\nself.addEventListener('install', event => {\n  console.log('[SW] Instalado');\n  // Activar inmediatamente sin esperar a recarga\n  self.skipWaiting();\n});\n\n// Activación del Service Worker\nself.addEventListener('activate', event => {\n  console.log('[SW] Activado');\n  // Tomar control de todas las páginas abiertas bajo este scope\n  event.waitUntil(self.clients.claim());\n});\n\n// Listener para Periodic Background Sync\nself.addEventListener('periodicsync', event => {\n  if (event.tag === 'sync-transactions') {\n    console.log('[SW] periodicSync recibido');\n    // Esperar a que termine la sincronización\n    event.waitUntil(syncTransactionsFromWorker());\n  }\n});\n\n// Función que hace fetch al endpoint y almacena en Firestore mediante la función Cloud\nasync function syncTransactionsFromWorker() {\n  try {\n    const uid = await getUIDFromIndexedDB();\n    if (!uid) {\n      console.warn('[SW] No hay UID en IndexedDB');\n      return;\n    }\n\n    const apiUrl = self.location.hostname === 'localhost'\n      ? 'http://localhost:5001/fintrack-1bced/us-central1/api'\n      : 'https://us-central1-fintrack-1bced.cloudfunctions.net/api';\n\n    const res = await fetch(`${apiUrl}/plaid/sync_transactions_and_store`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ userId: uid })\n    });\n\n    if (!res.ok) {\n      console.error('[SW] Error syncTransactionsFromWorker:', res.status, await res.text());\n    } else {\n      console.log('[SW] Sincronización periódica completada:', await res.json());\n    }\n  } catch (e) {\n    console.error('[SW] Excepción en syncTransactionsFromWorker:', e);\n  }\n}\n\n// Leer el UID desde IndexedDB para usarlo en la sincronización\nfunction getUIDFromIndexedDB() {\n  return new Promise((resolve, reject) => {\n    const req = indexedDB.open('fintrack-db', 1);\n    req.onupgradeneeded = () => {\n      // Si no existe la store, crearla\n      req.result.createObjectStore('metadata');\n    };\n    req.onsuccess = () => {\n      const db = req.result;\n      const tx = db.transaction('metadata', 'readonly');\n      const store = tx.objectStore('metadata');\n      const getReq = store.get('userId');\n      getReq.onsuccess = () => {\n        resolve(getReq.result || null);\n        db.close();\n      };\n      getReq.onerror = () => {\n        reject(getReq.error);\n        db.close();\n      };\n    };\n    req.onerror = () => {\n      reject(req.error);\n    };\n  });\n}\n"],"names":[],"version":3,"file":"service-worker.js.map","sourceRoot":"/__parcel_source_root/"}