{"mappings":"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","sources":["service-worker.js"],"sourcesContent":["// public/service-worker.js\n\n// Instalación del Service Worker\nself.addEventListener('install', event => {\n  console.log('[SW] Instalado');\n  // Activar inmediatamente sin esperar a recarga\n  self.skipWaiting();\n});\n\n// Activación del Service Worker\nself.addEventListener('activate', event => {\n  console.log('[SW] Activado');\n  // Tomar control inmediato de todas las páginas bajo el scope\n  event.waitUntil(self.clients.claim());\n});\n\n// Listener para Periodic Background Sync\nself.addEventListener('periodicsync', event => {\n  if (event.tag === 'sync-transactions') {\n    console.log('[SW] periodicSync recibido');\n    // Ejecutar flujo completo de sincronización\n    event.waitUntil(doFullSync());\n  }\n});\n\n// Flujo completo de sincronización, límites y notificaciones de excesos\nasync function doFullSync() {\n  try {\n    const uid = await getUIDFromIndexedDB();\n    if (!uid) {\n      console.warn('[SW] Sin UID en IndexedDB, abortando sync');\n      return;\n    }\n\n    // Determinar URL base de la API según entorno\n    const apiUrl = self.location.hostname === 'localhost'\n      ? 'http://localhost:5001/fintrack-1bced/us-central1/api'\n      : 'https://us-central1-fintrack-1bced.cloudfunctions.net/api';\n\n    // 1) Sincronizar transacciones\n    const txRes = await fetch(`${apiUrl}/plaid/sync_transactions_and_store`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ userId: uid })\n    });\n    if (!txRes.ok) {\n      console.error('[SW] sync_transactions_and_store falló:', txRes.status);\n      return;\n    }\n    console.log('[SW] Transacciones sincronizadas con éxito');\n\n    // 2) Sincronizar límites y obtener datos de historyLimits\n    const limRes = await fetch(`${apiUrl}/plaid/sync_history_limits_and_store`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ userId: uid })\n    });\n    if (!limRes.ok) {\n      console.error('[SW] sync_history_limits_and_store falló:', limRes.status);\n      return;\n    }\n\n    const { period, groups } = await limRes.json();\n    console.log(`[SW] historyLimits recibidos para ${period}:`, groups);\n\n    // 3) Comprobar excesos y notificar solo una vez por grupo\n    for (const [groupName, data] of Object.entries(groups || {})) {\n      const { limit, spent } = data;\n      if (spent <= limit) continue;\n\n      // Tag único por periodo y grupo para evitar duplicados\n      const notificationTag = `excess-${period}-${groupName}`;\n\n      // Verificar si hay notificación previa con ese tag\n      const prev = await self.registration.getNotifications({ tag: notificationTag });\n      if (prev.length > 0) {\n        console.log(`[SW] Notificación ya emitida para ${groupName}`);\n        continue;\n      }\n\n      // Construir y mostrar la notificación\n      const bodyText = `${groupName}: ${spent.toFixed(2)} € de ${limit.toFixed(2)} €`;\n      self.registration.showNotification('Límite excedido', {\n        body: bodyText,\n        icon: '/icons/notification-alert.png',\n        tag: notificationTag,\n        renotify: false,\n        vibrate: [100, 50, 100]\n      });\n      console.log(`[SW] Notificación enviada para ${groupName}`);\n    }\n  } catch (err) {\n    console.error('[SW] Error en doFullSync:', err);\n  }\n}\n\n// Obtener el UID desde IndexedDB (store: 'metadata', key: 'userId')\nfunction getUIDFromIndexedDB() {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open('fintrack-db', 1);\n    request.onupgradeneeded = () => {\n      const db = request.result;\n      if (!db.objectStoreNames.contains('metadata')) {\n        db.createObjectStore('metadata');\n      }\n    };\n    request.onsuccess = () => {\n      const db = request.result;\n      const tx = db.transaction('metadata', 'readonly');\n      const store = tx.objectStore('metadata');\n      const getReq = store.get('userId');\n      getReq.onsuccess = () => {\n        resolve(getReq.result || null);\n        db.close();\n      };\n      getReq.onerror = () => {\n        reject(getReq.error);\n        db.close();\n      };\n    };\n    request.onerror = () => reject(request.error);\n  });\n}"],"names":[],"version":3,"file":"service-worker.js.map","sourceRoot":"/__parcel_source_root/"}