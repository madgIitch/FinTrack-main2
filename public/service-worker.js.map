{"mappings":"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","sources":["service-worker.js"],"sourcesContent":["importScripts('https://www.gstatic.com/firebasejs/9.22.1/firebase-app-compat.js');\nimportScripts('https://www.gstatic.com/firebasejs/9.22.1/firebase-messaging-compat.js');\n\n// ── Inicializar Firebase en el Service Worker ─────────────────────────────\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCV05aIQnCR5803w-cWAKxc6U23bwF13-0\",\n  authDomain: \"fintrack-1bced.firebaseapp.com\",\n  projectId: \"fintrack-1bced\",\n  messagingSenderId: \"576236535723\",\n  appId: \"1:576236535723:web:4276524c0c6a10a3391cee\",\n});\n\nconst messaging = firebase.messaging();\n\n// ── Manejar notificaciones en segundo plano desde FCM ─────────────────────\nmessaging.onBackgroundMessage(payload => {\n  console.log('[firebase-messaging-sw.js] Received background message', payload);\n  const { title, body, icon } = payload.notification || {};\n  const options = {\n    body: body || '',\n    icon: icon || '/icons/notification.png',\n    data: payload.data || {}\n  };\n  self.registration.showNotification(title || 'Notificación', options);\n});\n\n// ── Instalación del Service Worker ─────────────────────────────────────────\nself.addEventListener('install', event => {\n  console.log('[SW] Instalado');\n  event.waitUntil(\n    caches.open('fintrack-api-cache').then(cache =>\n      cache.addAll([\n        'https://us-central1-fintrack-1bced.cloudfunctions.net/api/plaid/get_daily_summary',\n        'https://us-central1-fintrack-1bced.cloudfunctions.net/api/plaid/get_limits_and_store'\n      ])\n    )\n  );\n  self.skipWaiting();\n});\n\n\n// ── Activación del Service Worker ─────────────────────────────────────────\nself.addEventListener('activate', event => {\n  console.log('[SW] Activado');\n  event.waitUntil(self.clients.claim());\n});\n\n// ── Listener para Periodic Background Sync ─────────────────────────────────\nself.addEventListener('periodicsync', event => {\n  if (event.tag === 'sync-transactions') {\n    console.log('[SW] periodicSync recibido');\n    event.waitUntil(doFullSync());\n  }\n});\n\n// ── Flujo completo de sincronización, límites y notificaciones de excesos ──\nasync function doFullSync() {\n  try {\n    const uid = await getUIDFromIndexedDB();\n    if (!uid) {\n      console.warn('[SW] Sin UID en IndexedDB, abortando sync');\n      return;\n    }\n\n    const apiUrl = self.location.hostname === 'localhost'\n      ? 'http://localhost:5001/fintrack-1bced/us-central1/api'\n      : 'https://us-central1-fintrack-1bced.cloudfunctions.net/api';\n\n    // 1) Sincronizar transacciones\n    const txRes = await fetch(`${apiUrl}/plaid/sync_transactions_and_store`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ userId: uid })\n    });\n    if (!txRes.ok) {\n      console.error('[SW] sync_transactions_and_store falló:', txRes.status);\n      return;\n    }\n    console.log('[SW] Transacciones sincronizadas con éxito');\n\n    // 2) Sincronizar límites y obtener datos\n    const limRes = await fetch(`${apiUrl}/plaid/sync_history_limits_and_store`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ userId: uid })\n    });\n    if (!limRes.ok) {\n      console.error('[SW] sync_history_limits_and_store falló:', limRes.status);\n      return;\n    }\n    const { period, groups } = await limRes.json();\n    console.log(`[SW] historyLimits recibidos para ${period}:`, groups);\n\n    // 3) Comprobar excesos y notificar solo una vez\n    for (const [groupName, data] of Object.entries(groups || {})) {\n      const { limit, spent } = data;\n      if (spent <= limit) continue;\n\n      const notificationTag = `excess-${period}-${groupName}`;\n      const prev = await self.registration.getNotifications({ tag: notificationTag });\n      if (prev.length > 0) {\n        console.log(`[SW] Notificación ya emitida para ${groupName}`);\n        continue;\n      }\n\n      const bodyText = `${groupName}: ${spent.toFixed(2)} € de ${limit.toFixed(2)} €`;\n      self.registration.showNotification('Límite excedido', {\n        body:    bodyText,\n        icon:    '/icons/notification-alert.png',\n        tag:     notificationTag,\n        renotify:false,\n        vibrate: [100, 50, 100]\n      });\n      console.log(`[SW] Notificación enviada para ${groupName}`);\n    }\n  } catch (err) {\n    console.error('[SW] Error en doFullSync:', err);\n  }\n}\n\n// ── Escuchar push manualmente desde Push API ───────────────────────────────\nself.addEventListener('push', event => {\n  console.log('[SW] push recibido:', event);\n  let payload = {\n    title: 'Notificación',\n    body:  'Tienes una nueva notificación',\n    icon:  '/icons/notification.png',\n    data:  {}\n  };\n\n  try {\n    const json = event.data.json();\n    payload = {\n      title:      json.title  || payload.title,\n      body:       json.body   || payload.body,\n      icon:       json.icon   || payload.icon,\n      tag:        json.tag,\n      renotify:   json.renotify,\n      vibrate:    json.vibrate,\n      data:       json.data   || {}\n    };\n  } catch (e) {\n    console.warn('[SW] payload no era JSON, usando valores por defecto');\n  }\n\n  const options = {\n    body:     payload.body,\n    icon:     payload.icon,\n    tag:      payload.tag,\n    renotify: payload.renotify || false,\n    vibrate:  payload.vibrate || [100,50,100],\n    data:     payload.data\n  };\n\n  event.waitUntil(\n    self.registration.showNotification(payload.title, options)\n  );\n});\n\n// ── Gestionar click en la notificación ────────────────────────────────────\nself.addEventListener('notificationclick', event => {\n  console.log('[SW] notificationclick:', event.notification.tag);\n  event.notification.close();\n  event.waitUntil(\n    clients.matchAll({ type: 'window', includeUncontrolled: true })\n      .then(windowClients => {\n        for (const client of windowClients) {\n          if (client.url.includes('/pages/home.html') && 'focus' in client) {\n            return client.focus();\n          }\n        }\n        if (clients.openWindow) {\n          return clients.openWindow('/pages/home.html');\n        }\n      })\n  );\n});\n\n// ── Obtener el UID desde IndexedDB ────────────────────────────────────────\nfunction getUIDFromIndexedDB() {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open('fintrack-db', 1);\n    request.onupgradeneeded = () => {\n      const db = request.result;\n      if (!db.objectStoreNames.contains('metadata')) {\n        db.createObjectStore('metadata');\n      }\n    };\n    request.onsuccess = () => {\n      const db = request.result;\n      const tx = db.transaction('metadata', 'readonly');\n      const store = tx.objectStore('metadata');\n      const getReq = store.get('userId');\n      getReq.onsuccess = () => {\n        resolve(getReq.result || null);\n        db.close();\n      };\n      getReq.onerror = () => {\n        reject(getReq.error);\n        db.close();\n      };\n    };\n    request.onerror = () => reject(request.error);\n  });\n}\n\n\nself.addEventListener('fetch', event => {\n  const url = new URL(event.request.url);\n\n  // Solo interceptamos las llamadas a tu backend API\n  if (url.origin.includes('fintrack') && url.pathname.includes('/api/')) {\n    event.respondWith(\n      caches.open('fintrack-api-cache').then(async cache => {\n        try {\n          const networkResponse = await fetch(event.request.clone());\n          if (networkResponse.ok) {\n            cache.put(event.request, networkResponse.clone());\n          }\n          return networkResponse;\n        } catch (error) {\n          return cache.match(event.request).then(cached => {\n            if (cached) {\n              console.log('[SW] Modo offline: usando caché para', url.pathname);\n              return cached;\n            }\n            return new Response(JSON.stringify({ error: 'Sin conexión y sin datos cacheados' }), {\n              status: 503,\n              headers: { 'Content-Type': 'application/json' }\n            });\n          });\n        }\n      })\n    );\n  }\n});\n"],"names":[],"version":3,"file":"service-worker.js.map","sourceRoot":"/__parcel_source_root/"}