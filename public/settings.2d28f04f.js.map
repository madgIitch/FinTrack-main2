{"mappings":"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","sources":["<anon>","js/settings.js"],"sourcesContent":["import \"./FinTrack-main.401b9eb7.js\";\n\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n// public/js/settings.js\n\nvar $gEjZb = parcelRequire(\"gEjZb\");\n\nvar $ilpIi = parcelRequire(\"ilpIi\");\n\nvar $6AR8M = parcelRequire(\"6AR8M\");\n\nvar $1s7jw = parcelRequire(\"1s7jw\");\nconst $d46b9b59b093289a$var$db = (0, $ilpIi.getFirestore)((0, $gEjZb.app));\nconst $d46b9b59b093289a$var$messaging = (0, $1s7jw.getMessaging)((0, $gEjZb.app));\n// Tu clave pública VAPID (Firebase Console → Cloud Messaging → Web push certificates)\nconst $d46b9b59b093289a$var$VAPID_PUBLIC_KEY = 'BHf0cuTWZG91RETsBmmlc1xw3fzn-OWyonshT819ISjKsnOnttYbX8gm6dln7mAiGf5SyxjP52IcUMTAp0J4Vao';\n// ── Suscripción Push con FCM ────────────────────────────────────────────────\nasync function $d46b9b59b093289a$var$subscribeUserToPush() {\n    console.group(\"[settings.js] \\u25BA subscribeUserToPush START\");\n    try {\n        const user = (0, $gEjZb.auth).currentUser;\n        if (!user) throw new Error('No user logged in');\n        const userId = user.uid;\n        // Solicitar token FCM\n        const currentToken = await (0, $1s7jw.getToken)($d46b9b59b093289a$var$messaging, {\n            vapidKey: $d46b9b59b093289a$var$VAPID_PUBLIC_KEY\n        });\n        console.log('[settings.js] FCM token obtenido:', currentToken);\n        if (currentToken) {\n            // Guardar token en Firestore\n            await $d46b9b59b093289a$var$db.collection('users').doc(userId).collection('fcmTokens').doc(currentToken).set({\n                createdAt: (0, $ilpIi.serverTimestamp)(),\n                userAgent: navigator.userAgent\n            });\n            console.log('[settings.js] Token FCM guardado en Firestore');\n        } else console.warn('[settings.js] No se pudo obtener token de registro FCM.');\n    } catch (err) {\n        console.error('[settings.js] subscribeUserToPush ERROR:', err);\n        throw err;\n    } finally{\n        console.groupEnd();\n    }\n}\nasync function $d46b9b59b093289a$var$unsubscribeUserFromPush() {\n    console.group(\"[settings.js] \\u25BA unsubscribeUserFromPush START\");\n    try {\n        const user = (0, $gEjZb.auth).currentUser;\n        if (!user) throw new Error('No user logged in');\n        const userId = user.uid;\n        // Obtener el token actual\n        const currentToken = await (0, $1s7jw.getToken)($d46b9b59b093289a$var$messaging, {\n            vapidKey: $d46b9b59b093289a$var$VAPID_PUBLIC_KEY\n        });\n        if (currentToken) {\n            // Eliminar token en el cliente\n            const deleted = await (0, $1s7jw.deleteToken)($d46b9b59b093289a$var$messaging);\n            console.log('[settings.js] Token FCM eliminado en cliente:', deleted);\n            // Eliminar token de Firestore\n            await $d46b9b59b093289a$var$db.collection('users').doc(userId).collection('fcmTokens').doc(currentToken).delete();\n            console.log('[settings.js] Token FCM eliminado de Firestore');\n        } else console.warn('[settings.js] No hay token FCM para eliminar.');\n    } catch (err) {\n        console.error('[settings.js] unsubscribeUserFromPush ERROR:', err);\n        throw err;\n    } finally{\n        console.groupEnd();\n    }\n}\n// ── Crea una fila de presupuesto dinámicamente ──────────────────────────────\nfunction $d46b9b59b093289a$var$createBudgetRow(selectedCategory = '', amount = '') {\n    const rowDiv = document.createElement('div');\n    rowDiv.className = 'budget-row';\n    const select = document.createElement('select');\n    select.className = 'category-select';\n    const placeholder = document.createElement('option');\n    placeholder.value = '';\n    placeholder.textContent = \"\\u2014 Selecciona categor\\xeda \\u2014\";\n    placeholder.disabled = true;\n    placeholder.selected = !selectedCategory;\n    select.append(placeholder);\n    $d46b9b59b093289a$var$allCategories.forEach((cat)=>{\n        const opt = document.createElement('option');\n        opt.value = cat;\n        opt.textContent = cat;\n        if (cat === selectedCategory) opt.selected = true;\n        select.append(opt);\n    });\n    const input = document.createElement('input');\n    input.type = 'number';\n    input.className = 'budget-input';\n    input.placeholder = '0,00';\n    input.min = '0';\n    input.step = '0.01';\n    if (amount !== '' && !isNaN(amount)) input.value = parseFloat(amount).toFixed(2);\n    const removeBtn = document.createElement('button');\n    removeBtn.type = 'button';\n    removeBtn.className = 'remove-btn';\n    removeBtn.textContent = 'Eliminar';\n    removeBtn.addEventListener('click', ()=>rowDiv.remove());\n    rowDiv.append(select, input, removeBtn);\n    return rowDiv;\n}\nlet $d46b9b59b093289a$var$allCategories = [];\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    console.log('[settings.js] DOMContentLoaded');\n    // Referencias UI\n    const backBtn = document.getElementById('back-btn');\n    const chkNotifPush = document.getElementById('notif-push');\n    const chkNotifEmail = document.getElementById('notif-email');\n    const chkReportPush = document.getElementById('report-push');\n    const chkReportEmail = document.getElementById('report-email');\n    const btnSave = document.getElementById('save-settings-btn');\n    const budgetsContainer = document.getElementById('budgets-container');\n    const addCategoryBtn = document.getElementById('add-category-btn');\n    // Navegación atrás\n    backBtn.addEventListener('click', ()=>window.history.back());\n    // Añadir nueva fila de presupuesto\n    addCategoryBtn.addEventListener('click', ()=>{\n        budgetsContainer.appendChild($d46b9b59b093289a$var$createBudgetRow());\n    });\n    // Cambiar suscripción Push al togglear checkbox\n    chkNotifPush.addEventListener('change', async ()=>{\n        console.log('[settings.js] notif-push changed:', chkNotifPush.checked);\n        if (chkNotifPush.checked) {\n            if (Notification.permission === 'default') {\n                const perm = await Notification.requestPermission();\n                console.log('[settings.js] Notification.permission after request:', perm);\n                if (perm !== 'granted') {\n                    alert('Debes permitir notificaciones para activar Push.');\n                    chkNotifPush.checked = false;\n                    return;\n                }\n            }\n            try {\n                await $d46b9b59b093289a$var$subscribeUserToPush();\n            } catch (err) {\n                console.error('[settings.js] subscribeUserToPush error:', err);\n                chkNotifPush.checked = false;\n            }\n        } else try {\n            await $d46b9b59b093289a$var$unsubscribeUserFromPush();\n        } catch (err) {\n            console.error('[settings.js] unsubscribeUserFromPush error:', err);\n            chkNotifPush.checked = true;\n        }\n    });\n    // Cuando cambia el estado de auth\n    (0, $6AR8M.onAuthStateChanged)((0, $gEjZb.auth), async (user)=>{\n        console.log('[settings.js] onAuthStateChanged:', user);\n        if (!user) return window.location.href = '../index.html';\n        const uid = user.uid;\n        const userRef = (0, $ilpIi.doc)($d46b9b59b093289a$var$db, 'users', uid);\n        // 1) Cargar categorías disponibles\n        try {\n            const snap = await (0, $ilpIi.getDocs)((0, $ilpIi.collection)($d46b9b59b093289a$var$db, 'groups'));\n            $d46b9b59b093289a$var$allCategories = snap.docs.map((d)=>d.id);\n            console.log('[settings.js] allCategories:', $d46b9b59b093289a$var$allCategories);\n        } catch (e) {\n            console.error('[settings.js] Error loading groups:', e);\n            $d46b9b59b093289a$var$allCategories = [];\n        }\n        // 2) Cargar ajustes guardados\n        let loaded = {};\n        try {\n            const snap = await (0, $ilpIi.getDoc)(userRef);\n            loaded = snap.exists() ? snap.data().settings || {} : {};\n            console.log('[settings.js] loaded settings:', loaded);\n        } catch (e) {\n            console.error('[settings.js] Error loading settings:', e);\n        }\n        // Inicializar checkboxes según lo cargado\n        chkNotifPush.checked = Boolean(loaded.notifications?.push);\n        chkNotifEmail.checked = Boolean(loaded.notifications?.email);\n        chkReportPush.checked = Boolean(loaded.reports?.push);\n        chkReportEmail.checked = Boolean(loaded.reports?.email);\n        // Poblamos filas de presupuesto\n        budgetsContainer.innerHTML = '';\n        const map = loaded.budgets || {};\n        Object.entries(map).forEach(([cat, amt])=>{\n            if (!$d46b9b59b093289a$var$allCategories.includes(cat)) $d46b9b59b093289a$var$allCategories.push(cat);\n            budgetsContainer.appendChild($d46b9b59b093289a$var$createBudgetRow(cat, amt));\n        });\n        if (!Object.keys(map).length) budgetsContainer.appendChild($d46b9b59b093289a$var$createBudgetRow());\n    });\n    // Guardar ajustes al hacer click\n    btnSave.addEventListener('click', async ()=>{\n        console.log('[settings.js] Guardar Ajustes click');\n        btnSave.disabled = true;\n        const originalText = btnSave.textContent;\n        btnSave.textContent = \"Guardando\\u2026\";\n        // Construir objeto settings\n        const settings = {\n            notifications: {\n                push: chkNotifPush.checked,\n                email: chkNotifEmail.checked\n            },\n            reports: {\n                push: chkReportPush.checked,\n                email: chkReportEmail.checked\n            },\n            budgets: {}\n        };\n        // Validar filas de presupuesto\n        const rows = Array.from(budgetsContainer.children);\n        const seen = new Set();\n        let valid = true, errorMsg = '';\n        rows.forEach((row, idx)=>{\n            const cat = row.querySelector('.category-select').value;\n            const amtStr = row.querySelector('.budget-input').value.trim();\n            if (!cat) return;\n            const amtNum = parseFloat(amtStr);\n            if (isNaN(amtNum) || amtNum < 0) {\n                valid = false;\n                errorMsg = `Fila ${idx + 1}: monto inv\\xe1lido para \"${cat}\".`;\n                return;\n            }\n            if (seen.has(cat)) {\n                valid = false;\n                errorMsg = `Categor\\xeda \"${cat}\" repetida.`;\n                return;\n            }\n            seen.add(cat);\n            settings.budgets[cat] = amtNum;\n        });\n        if (!valid) {\n            alert(errorMsg);\n            btnSave.textContent = 'Error, reintenta';\n            setTimeout(()=>{\n                btnSave.disabled = false;\n                btnSave.textContent = originalText;\n            }, 2000);\n            return;\n        }\n        // Guardar en Firestore y forzar Sync\n        try {\n            const user = (0, $gEjZb.auth).currentUser;\n            if (!user) throw new Error('No user logged in');\n            const userRef = (0, $ilpIi.doc)($d46b9b59b093289a$var$db, 'users', user.uid);\n            await (0, $ilpIi.updateDoc)(userRef, {\n                settings: settings\n            });\n            console.log('[settings.js] Settings updated in Firestore');\n            // Forzar manual sync\n            console.log('[settings.js] Calling sync endpoint');\n            await fetch(`${apiUrl}/plaid/sync_transactions_and_store`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    userId: user.uid\n                })\n            });\n            console.log('[settings.js] Sync endpoint called');\n            btnSave.textContent = \"\\xa1Guardado y sincronizado!\";\n        } catch (e) {\n            console.error('[settings.js] Error saving or syncing:', e);\n            btnSave.textContent = 'Error, reintenta';\n        } finally{\n            setTimeout(()=>{\n                btnSave.disabled = false;\n                btnSave.textContent = originalText;\n            }, 1500);\n        }\n    });\n});\n\n\n//# sourceMappingURL=settings.2d28f04f.js.map\n","// public/js/settings.js\n\nimport { auth, app } from './firebase.js';\nimport {\n  getFirestore,\n  doc,\n  getDoc,\n  updateDoc,\n  collection,\n  getDocs,\n  serverTimestamp\n} from 'firebase/firestore';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport {\n  getMessaging,\n  getToken,\n  deleteToken\n} from 'firebase/messaging';\n\nconst db = getFirestore(app);\nconst messaging = getMessaging(app);\n\n// Tu clave pública VAPID (Firebase Console → Cloud Messaging → Web push certificates)\nconst VAPID_PUBLIC_KEY = 'BHf0cuTWZG91RETsBmmlc1xw3fzn-OWyonshT819ISjKsnOnttYbX8gm6dln7mAiGf5SyxjP52IcUMTAp0J4Vao';\n\n// ── Suscripción Push con FCM ────────────────────────────────────────────────\nasync function subscribeUserToPush() {\n  console.group('[settings.js] ► subscribeUserToPush START');\n  try {\n    const user = auth.currentUser;\n    if (!user) throw new Error('No user logged in');\n    const userId = user.uid;\n\n    // Solicitar token FCM\n    const currentToken = await getToken(messaging, { vapidKey: VAPID_PUBLIC_KEY });\n    console.log('[settings.js] FCM token obtenido:', currentToken);\n\n    if (currentToken) {\n      // Guardar token en Firestore\n      await db\n        .collection('users')\n        .doc(userId)\n        .collection('fcmTokens')\n        .doc(currentToken)\n        .set({\n          createdAt: serverTimestamp(),\n          userAgent: navigator.userAgent\n        });\n      console.log('[settings.js] Token FCM guardado en Firestore');\n    } else {\n      console.warn('[settings.js] No se pudo obtener token de registro FCM.');\n    }\n  } catch (err) {\n    console.error('[settings.js] subscribeUserToPush ERROR:', err);\n    throw err;\n  } finally {\n    console.groupEnd();\n  }\n}\n\nasync function unsubscribeUserFromPush() {\n  console.group('[settings.js] ► unsubscribeUserFromPush START');\n  try {\n    const user = auth.currentUser;\n    if (!user) throw new Error('No user logged in');\n    const userId = user.uid;\n\n    // Obtener el token actual\n    const currentToken = await getToken(messaging, { vapidKey: VAPID_PUBLIC_KEY });\n    if (currentToken) {\n      // Eliminar token en el cliente\n      const deleted = await deleteToken(messaging);\n      console.log('[settings.js] Token FCM eliminado en cliente:', deleted);\n\n      // Eliminar token de Firestore\n      await db\n        .collection('users')\n        .doc(userId)\n        .collection('fcmTokens')\n        .doc(currentToken)\n        .delete();\n      console.log('[settings.js] Token FCM eliminado de Firestore');\n    } else {\n      console.warn('[settings.js] No hay token FCM para eliminar.');\n    }\n  } catch (err) {\n    console.error('[settings.js] unsubscribeUserFromPush ERROR:', err);\n    throw err;\n  } finally {\n    console.groupEnd();\n  }\n}\n\n// ── Crea una fila de presupuesto dinámicamente ──────────────────────────────\nfunction createBudgetRow(selectedCategory = '', amount = '') {\n  const rowDiv = document.createElement('div');\n  rowDiv.className = 'budget-row';\n\n  const select = document.createElement('select');\n  select.className = 'category-select';\n  const placeholder = document.createElement('option');\n  placeholder.value = '';\n  placeholder.textContent = '— Selecciona categoría —';\n  placeholder.disabled = true;\n  placeholder.selected = !selectedCategory;\n  select.append(placeholder);\n\n  allCategories.forEach(cat => {\n    const opt = document.createElement('option');\n    opt.value = cat;\n    opt.textContent = cat;\n    if (cat === selectedCategory) opt.selected = true;\n    select.append(opt);\n  });\n\n  const input = document.createElement('input');\n  input.type = 'number';\n  input.className = 'budget-input';\n  input.placeholder = '0,00';\n  input.min = '0';\n  input.step = '0.01';\n  if (amount !== '' && !isNaN(amount)) {\n    input.value = parseFloat(amount).toFixed(2);\n  }\n\n  const removeBtn = document.createElement('button');\n  removeBtn.type = 'button';\n  removeBtn.className = 'remove-btn';\n  removeBtn.textContent = 'Eliminar';\n  removeBtn.addEventListener('click', () => rowDiv.remove());\n\n  rowDiv.append(select, input, removeBtn);\n  return rowDiv;\n}\n\nlet allCategories = [];\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('[settings.js] DOMContentLoaded');\n\n  // Referencias UI\n  const backBtn          = document.getElementById('back-btn');\n  const chkNotifPush     = document.getElementById('notif-push');\n  const chkNotifEmail    = document.getElementById('notif-email');\n  const chkReportPush    = document.getElementById('report-push');\n  const chkReportEmail   = document.getElementById('report-email');\n  const btnSave          = document.getElementById('save-settings-btn');\n  const budgetsContainer = document.getElementById('budgets-container');\n  const addCategoryBtn   = document.getElementById('add-category-btn');\n\n  // Navegación atrás\n  backBtn.addEventListener('click', () => window.history.back());\n\n  // Añadir nueva fila de presupuesto\n  addCategoryBtn.addEventListener('click', () => {\n    budgetsContainer.appendChild(createBudgetRow());\n  });\n\n  // Cambiar suscripción Push al togglear checkbox\n  chkNotifPush.addEventListener('change', async () => {\n    console.log('[settings.js] notif-push changed:', chkNotifPush.checked);\n    if (chkNotifPush.checked) {\n      if (Notification.permission === 'default') {\n        const perm = await Notification.requestPermission();\n        console.log('[settings.js] Notification.permission after request:', perm);\n        if (perm !== 'granted') {\n          alert('Debes permitir notificaciones para activar Push.');\n          chkNotifPush.checked = false;\n          return;\n        }\n      }\n      try {\n        await subscribeUserToPush();\n      } catch (err) {\n        console.error('[settings.js] subscribeUserToPush error:', err);\n        chkNotifPush.checked = false;\n      }\n    } else {\n      try {\n        await unsubscribeUserFromPush();\n      } catch (err) {\n        console.error('[settings.js] unsubscribeUserFromPush error:', err);\n        chkNotifPush.checked = true;\n      }\n    }\n  });\n\n  // Cuando cambia el estado de auth\n  onAuthStateChanged(auth, async (user) => {\n    console.log('[settings.js] onAuthStateChanged:', user);\n    if (!user) return window.location.href = '../index.html';\n    const uid = user.uid;\n    const userRef = doc(db, 'users', uid);\n\n    // 1) Cargar categorías disponibles\n    try {\n      const snap = await getDocs(collection(db, 'groups'));\n      allCategories = snap.docs.map(d => d.id);\n      console.log('[settings.js] allCategories:', allCategories);\n    } catch (e) {\n      console.error('[settings.js] Error loading groups:', e);\n      allCategories = [];\n    }\n\n    // 2) Cargar ajustes guardados\n    let loaded = {};\n    try {\n      const snap = await getDoc(userRef);\n      loaded = snap.exists() ? snap.data().settings || {} : {};\n      console.log('[settings.js] loaded settings:', loaded);\n    } catch (e) {\n      console.error('[settings.js] Error loading settings:', e);\n    }\n\n    // Inicializar checkboxes según lo cargado\n    chkNotifPush.checked   = Boolean(loaded.notifications?.push);\n    chkNotifEmail.checked  = Boolean(loaded.notifications?.email);\n    chkReportPush.checked  = Boolean(loaded.reports?.push);\n    chkReportEmail.checked = Boolean(loaded.reports?.email);\n\n    // Poblamos filas de presupuesto\n    budgetsContainer.innerHTML = '';\n    const map = loaded.budgets || {};\n    Object.entries(map).forEach(([cat, amt]) => {\n      if (!allCategories.includes(cat)) allCategories.push(cat);\n      budgetsContainer.appendChild(createBudgetRow(cat, amt));\n    });\n    if (!Object.keys(map).length) {\n      budgetsContainer.appendChild(createBudgetRow());\n    }\n  });\n\n  // Guardar ajustes al hacer click\n  btnSave.addEventListener('click', async () => {\n    console.log('[settings.js] Guardar Ajustes click');\n    btnSave.disabled = true;\n    const originalText = btnSave.textContent;\n    btnSave.textContent = 'Guardando…';\n\n    // Construir objeto settings\n    const settings = {\n      notifications: {\n        push:  chkNotifPush.checked,\n        email: chkNotifEmail.checked\n      },\n      reports: {\n        push:  chkReportPush.checked,\n        email: chkReportEmail.checked\n      },\n      budgets: {}\n    };\n\n    // Validar filas de presupuesto\n    const rows = Array.from(budgetsContainer.children);\n    const seen = new Set();\n    let valid = true, errorMsg = '';\n\n    rows.forEach((row, idx) => {\n      const cat = row.querySelector('.category-select').value;\n      const amtStr = row.querySelector('.budget-input').value.trim();\n      if (!cat) return;\n      const amtNum = parseFloat(amtStr);\n      if (isNaN(amtNum) || amtNum < 0) {\n        valid = false;\n        errorMsg = `Fila ${idx+1}: monto inválido para \"${cat}\".`;\n        return;\n      }\n      if (seen.has(cat)) {\n        valid = false;\n        errorMsg = `Categoría \"${cat}\" repetida.`;\n        return;\n      }\n      seen.add(cat);\n      settings.budgets[cat] = amtNum;\n    });\n\n    if (!valid) {\n      alert(errorMsg);\n      btnSave.textContent = 'Error, reintenta';\n      setTimeout(() => {\n        btnSave.disabled = false;\n        btnSave.textContent = originalText;\n      }, 2000);\n      return;\n    }\n\n    // Guardar en Firestore y forzar Sync\n    try {\n      const user = auth.currentUser;\n      if (!user) throw new Error('No user logged in');\n      const userRef = doc(db, 'users', user.uid);\n      await updateDoc(userRef, { settings });\n      console.log('[settings.js] Settings updated in Firestore');\n\n      // Forzar manual sync\n      console.log('[settings.js] Calling sync endpoint');\n      await fetch(`${apiUrl}/plaid/sync_transactions_and_store`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId: user.uid })\n      });\n      console.log('[settings.js] Sync endpoint called');\n\n      btnSave.textContent = '¡Guardado y sincronizado!';\n    } catch (e) {\n      console.error('[settings.js] Error saving or syncing:', e);\n      btnSave.textContent = 'Error, reintenta';\n    } finally {\n      setTimeout(() => {\n        btnSave.disabled = false;\n        btnSave.textContent = originalText;\n      }, 1500);\n    }\n  });\n});\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$gEjZb","$ilpIi","$6AR8M","$1s7jw","$d46b9b59b093289a$var$db","getFirestore","app","$d46b9b59b093289a$var$messaging","getMessaging","$d46b9b59b093289a$var$VAPID_PUBLIC_KEY","$d46b9b59b093289a$var$subscribeUserToPush","console","group","user","auth","currentUser","userId","uid","currentToken","getToken","vapidKey","log","collection","doc","set","createdAt","serverTimestamp","userAgent","navigator","warn","error","groupEnd","$d46b9b59b093289a$var$unsubscribeUserFromPush","deleted","deleteToken","delete","$d46b9b59b093289a$var$createBudgetRow","selectedCategory","amount","rowDiv","document","createElement","className","select","placeholder","value","textContent","disabled","selected","append","$d46b9b59b093289a$var$allCategories","forEach","cat","opt","input","type","min","step","isNaN","parseFloat","toFixed","removeBtn","addEventListener","remove","backBtn","getElementById","chkNotifPush","chkNotifEmail","chkReportPush","chkReportEmail","btnSave","budgetsContainer","addCategoryBtn","window","history","back","appendChild","checked","Notification","permission","perm","requestPermission","alert","onAuthStateChanged","location","href","userRef","snap","getDocs","docs","map","d","e","loaded","getDoc","exists","data","settings","Boolean","notifications","push","email","reports","innerHTML","budgets","Object","entries","amt","includes","keys","length","originalText","rows","Array","from","children","seen","Set","valid","errorMsg","row","idx","querySelector","amtStr","trim","amtNum","has","add","setTimeout","updateDoc","fetch","apiUrl","method","headers","body","JSON","stringify"],"version":3,"file":"settings.2d28f04f.js.map"}