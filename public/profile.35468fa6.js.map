{"mappings":"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","sources":["<anon>","js/profile.js"],"sourcesContent":["import \"./FinTrack-main.401b9eb7.js\";\n\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $gEjZb = parcelRequire(\"gEjZb\");\n\nvar $6AR8M = parcelRequire(\"6AR8M\");\n\nvar $ilpIi = parcelRequire(\"ilpIi\");\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    console.log('%c[DEBUG] profile.js loaded', 'color: green; font-weight: bold;');\n    const nombreSpan = document.getElementById('profile-nombre');\n    const apellidosSpan = document.getElementById('profile-apellidos');\n    const emailSpan = document.getElementById('profile-email');\n    const connectBankButton = document.getElementById('link-bank-button');\n    const linkedAccountsMessage = document.getElementById('linked-accounts-message');\n    const accountsListContainer = document.getElementById('linked-accounts-list');\n    let accountsLoaded = false;\n    const apiUrl = window.location.hostname === 'localhost' ? 'http://localhost:3071' : 'https://us-central1-fintrack-1bced.cloudfunctions.net/api';\n    console.log('[DEBUG] apiUrl es:', apiUrl);\n    async function fetchAndInitializePlaidLink(updateToken = null) {\n        if (!(0, $gEjZb.auth).currentUser) return false;\n        const payload = {\n            userId: (0, $gEjZb.auth).currentUser.uid\n        };\n        if (updateToken) payload.accessToken = updateToken;\n        try {\n            const res = await fetch(`${apiUrl}/plaid/create_link_token`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(payload)\n            });\n            if (!res.ok) return false;\n            const data = await res.json();\n            if (!data.link_token) return false;\n            $f7f7823eed57e60e$var$initializePlaidLink(data.link_token);\n            return true;\n        } catch (error) {\n            console.error('[ERROR] fetchAndInitializePlaidLink:', error);\n            return false;\n        }\n    }\n    (0, $6AR8M.onAuthStateChanged)((0, $gEjZb.auth), async (user)=>{\n        if (!user || accountsLoaded) return;\n        accountsLoaded = true;\n        try {\n            const userDoc = await (0, $ilpIi.getDoc)((0, $ilpIi.doc)((0, $gEjZb.db), 'users', user.uid));\n            if (!userDoc.exists()) return;\n            const userData = userDoc.data();\n            nombreSpan.textContent = userData.firstName || 'Sin nombre';\n            apellidosSpan.textContent = userData.lastName || 'Sin apellidos';\n            emailSpan.textContent = user.email || 'Sin email';\n            const accounts = userData.plaid?.accounts || [];\n            if (accounts.length === 0) {\n                linkedAccountsMessage.style.display = 'block';\n                linkedAccountsMessage.textContent = 'No hay cuentas vinculadas actualmente.';\n                return;\n            } else linkedAccountsMessage.style.display = 'none';\n            for (const [index, account] of accounts.entries())try {\n                const res = await fetch(`${apiUrl}/plaid/get_account_details`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        accessToken: account.accessToken\n                    })\n                });\n                const details = await res.json();\n                if (details.status === 'login_required') {\n                    const accountDiv = document.createElement('div');\n                    accountDiv.classList.add('linked-account');\n                    accountDiv.innerHTML = `\n              <p><strong>Cuenta ${index + 1}</strong></p>\n              <p style=\"color: #c00;\">Credenciales caducadas.</p>\n              <button class=\"reauth-btn\">Re-autenticar cuenta</button>\n            `;\n                    accountDiv.querySelector('.reauth-btn').addEventListener('click', async ()=>{\n                        const ok = await fetchAndInitializePlaidLink(details.accessToken);\n                        if (ok) $f7f7823eed57e60e$var$plaidLinkHandler.open();\n                        else alert('No se pudo iniciar Plaid Link.');\n                    });\n                    accountsListContainer.appendChild(accountDiv);\n                    continue;\n                }\n                const accountDetails = details.accounts?.[0] || {};\n                const institutionDetails = details.institution || {};\n                const accountDiv = document.createElement('div');\n                accountDiv.classList.add('linked-account');\n                accountDiv.innerHTML = `\n            <p><strong>Cuenta ${index + 1}</strong></p>\n            <p>Banco: ${institutionDetails.name || 'Desconocido'}</p>\n            <p>Nombre de la cuenta: ${accountDetails.name || 'No especificado'}</p>\n          `;\n                accountsListContainer.appendChild(accountDiv);\n            } catch (err) {\n                console.error(`[ERROR] al procesar la cuenta #${index + 1}:`, err);\n            }\n            $f7f7823eed57e60e$var$initSlider();\n        } catch (err) {\n            console.error('[ERROR] Error general al cargar cuentas:', err);\n        }\n    });\n    if (connectBankButton) connectBankButton.addEventListener('click', async ()=>{\n        if (!$f7f7823eed57e60e$var$plaidLinkHandler) {\n            const initialized = await fetchAndInitializePlaidLink();\n            if (!initialized) {\n                alert('No se pudo iniciar Plaid Link. Revisa la consola.');\n                return;\n            }\n        }\n        $f7f7823eed57e60e$var$plaidLinkHandler.open();\n    });\n});\nlet $f7f7823eed57e60e$var$plaidLinkHandler = null;\nfunction $f7f7823eed57e60e$var$initializePlaidLink(linkToken) {\n    $f7f7823eed57e60e$var$plaidLinkHandler = Plaid.create({\n        token: linkToken,\n        onSuccess: async (public_token, metadata)=>{\n            try {\n                const apiUrl = window.location.hostname === 'localhost' ? 'http://localhost:3071' : 'https://us-central1-fintrack-1bced.cloudfunctions.net/api';\n                const res = await fetch(`${apiUrl}/plaid/exchange_public_token`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        public_token: public_token,\n                        userId: (0, $gEjZb.auth).currentUser.uid\n                    })\n                });\n                if (!res.ok) {\n                    const errorData = await res.json();\n                    alert(`Error al vincular cuenta: ${errorData.message || 'Desconocido'}`);\n                } else {\n                    alert(\"Cuenta bancaria vinculada con \\xe9xito.\");\n                    location.reload();\n                }\n            } catch (err) {\n                console.error('[ERROR] onSuccess => exchange_public_token:', err);\n                alert('Error al vincular la cuenta bancaria.');\n            }\n        },\n        onExit: (err, metadata)=>{},\n        onEvent: (eventName, metadata)=>{}\n    });\n}\nfunction $f7f7823eed57e60e$var$initSlider() {\n    const slider = document.querySelector('.accounts-slider');\n    if (!slider) return;\n    const slides = slider.querySelectorAll('.linked-account');\n    const prevBtn = document.getElementById('slider-prev');\n    const nextBtn = document.getElementById('slider-next');\n    const dotsContainer = document.getElementById('slider-dots');\n    if (slides.length === 0) return;\n    let currentIndex = 0;\n    function createDots() {\n        dotsContainer.innerHTML = '';\n        for(let i = 0; i < slides.length; i++){\n            const dot = document.createElement('div');\n            dot.classList.add('slider-dot');\n            if (i === 0) dot.classList.add('active');\n            dot.addEventListener('click', ()=>goToSlide(i));\n            dotsContainer.appendChild(dot);\n        }\n    }\n    function updateDots(index) {\n        const dots = dotsContainer.querySelectorAll('.slider-dot');\n        dots.forEach((dot, i)=>{\n            dot.classList.toggle('active', i === index);\n        });\n    }\n    function goToSlide(index) {\n        if (index < 0) index = slides.length - 1;\n        if (index >= slides.length) index = 0;\n        currentIndex = index;\n        slider.style.transform = `translateX(-${100 * index}%)`;\n        updateDots(index);\n    }\n    if (prevBtn) prevBtn.addEventListener('click', ()=>goToSlide(currentIndex - 1));\n    if (nextBtn) nextBtn.addEventListener('click', ()=>goToSlide(currentIndex + 1));\n    createDots();\n    goToSlide(0);\n}\n\n\n//# sourceMappingURL=profile.35468fa6.js.map\n","import { auth, db } from '../js/firebase.js';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { doc, getDoc } from 'firebase/firestore';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('%c[DEBUG] profile.js loaded', 'color: green; font-weight: bold;');\n\n  const nombreSpan = document.getElementById('profile-nombre');\n  const apellidosSpan = document.getElementById('profile-apellidos');\n  const emailSpan = document.getElementById('profile-email');\n  const connectBankButton = document.getElementById('link-bank-button');\n  const linkedAccountsMessage = document.getElementById('linked-accounts-message');\n  const accountsListContainer = document.getElementById('linked-accounts-list');\n\n  let accountsLoaded = false;\n\n  const apiUrl = window.location.hostname === 'localhost'\n    ? 'http://localhost:3071'\n    : 'https://us-central1-fintrack-1bced.cloudfunctions.net/api';\n\n  console.log('[DEBUG] apiUrl es:', apiUrl);\n\n  async function fetchAndInitializePlaidLink(updateToken = null) {\n    if (!auth.currentUser) return false;\n\n    const payload = { userId: auth.currentUser.uid };\n    if (updateToken) payload.accessToken = updateToken;\n\n    try {\n      const res = await fetch(`${apiUrl}/plaid/create_link_token`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload)\n      });\n\n      if (!res.ok) return false;\n\n      const data = await res.json();\n      if (!data.link_token) return false;\n\n      initializePlaidLink(data.link_token);\n      return true;\n    } catch (error) {\n      console.error('[ERROR] fetchAndInitializePlaidLink:', error);\n      return false;\n    }\n  }\n\n  onAuthStateChanged(auth, async (user) => {\n    if (!user || accountsLoaded) return;\n    accountsLoaded = true;\n\n    try {\n      const userDoc = await getDoc(doc(db, 'users', user.uid));\n      if (!userDoc.exists()) return;\n\n      const userData = userDoc.data();\n      nombreSpan.textContent = userData.firstName || 'Sin nombre';\n      apellidosSpan.textContent = userData.lastName || 'Sin apellidos';\n      emailSpan.textContent = user.email || 'Sin email';\n\n      const accounts = userData.plaid?.accounts || [];\n      if (accounts.length === 0) {\n        linkedAccountsMessage.style.display = 'block';\n        linkedAccountsMessage.textContent = 'No hay cuentas vinculadas actualmente.';\n        return;\n      } else {\n        linkedAccountsMessage.style.display = 'none';\n      }\n\n      for (const [index, account] of accounts.entries()) {\n        try {\n          const res = await fetch(`${apiUrl}/plaid/get_account_details`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ accessToken: account.accessToken })\n          });\n\n          const details = await res.json();\n\n          if (details.status === 'login_required') {\n            const accountDiv = document.createElement('div');\n            accountDiv.classList.add('linked-account');\n            accountDiv.innerHTML = `\n              <p><strong>Cuenta ${index + 1}</strong></p>\n              <p style=\"color: #c00;\">Credenciales caducadas.</p>\n              <button class=\"reauth-btn\">Re-autenticar cuenta</button>\n            `;\n            accountDiv.querySelector('.reauth-btn').addEventListener('click', async () => {\n              const ok = await fetchAndInitializePlaidLink(details.accessToken);\n              if (ok) plaidLinkHandler.open();\n              else alert('No se pudo iniciar Plaid Link.');\n            });\n            accountsListContainer.appendChild(accountDiv);\n            continue;\n          }\n\n          const accountDetails = details.accounts?.[0] || {};\n          const institutionDetails = details.institution || {};\n\n          const accountDiv = document.createElement('div');\n          accountDiv.classList.add('linked-account');\n          accountDiv.innerHTML = `\n            <p><strong>Cuenta ${index + 1}</strong></p>\n            <p>Banco: ${institutionDetails.name || 'Desconocido'}</p>\n            <p>Nombre de la cuenta: ${accountDetails.name || 'No especificado'}</p>\n          `;\n\n          accountsListContainer.appendChild(accountDiv);\n\n        } catch (err) {\n          console.error(`[ERROR] al procesar la cuenta #${index + 1}:`, err);\n        }\n      }\n\n      initSlider();\n\n    } catch (err) {\n      console.error('[ERROR] Error general al cargar cuentas:', err);\n    }\n  });\n\n  if (connectBankButton) {\n    connectBankButton.addEventListener('click', async () => {\n      if (!plaidLinkHandler) {\n        const initialized = await fetchAndInitializePlaidLink();\n        if (!initialized) {\n          alert('No se pudo iniciar Plaid Link. Revisa la consola.');\n          return;\n        }\n      }\n      plaidLinkHandler.open();\n    });\n  }\n});\n\nlet plaidLinkHandler = null;\n\nfunction initializePlaidLink(linkToken) {\n  plaidLinkHandler = Plaid.create({\n    token: linkToken,\n    onSuccess: async (public_token, metadata) => {\n      try {\n        const apiUrl = window.location.hostname === 'localhost'\n          ? 'http://localhost:3071'\n          : 'https://us-central1-fintrack-1bced.cloudfunctions.net/api';\n\n        const res = await fetch(`${apiUrl}/plaid/exchange_public_token`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ public_token, userId: auth.currentUser.uid })\n        });\n\n        if (!res.ok) {\n          const errorData = await res.json();\n          alert(`Error al vincular cuenta: ${errorData.message || 'Desconocido'}`);\n        } else {\n          alert('Cuenta bancaria vinculada con éxito.');\n          location.reload();\n        }\n      } catch (err) {\n        console.error('[ERROR] onSuccess => exchange_public_token:', err);\n        alert('Error al vincular la cuenta bancaria.');\n      }\n    },\n    onExit: (err, metadata) => {},\n    onEvent: (eventName, metadata) => {}\n  });\n}\n\nfunction initSlider() {\n  const slider = document.querySelector('.accounts-slider');\n  if (!slider) return;\n\n  const slides = slider.querySelectorAll('.linked-account');\n  const prevBtn = document.getElementById('slider-prev');\n  const nextBtn = document.getElementById('slider-next');\n  const dotsContainer = document.getElementById('slider-dots');\n\n  if (slides.length === 0) return;\n\n  let currentIndex = 0;\n\n  function createDots() {\n    dotsContainer.innerHTML = '';\n    for (let i = 0; i < slides.length; i++) {\n      const dot = document.createElement('div');\n      dot.classList.add('slider-dot');\n      if (i === 0) dot.classList.add('active');\n      dot.addEventListener('click', () => goToSlide(i));\n      dotsContainer.appendChild(dot);\n    }\n  }\n\n  function updateDots(index) {\n    const dots = dotsContainer.querySelectorAll('.slider-dot');\n    dots.forEach((dot, i) => {\n      dot.classList.toggle('active', i === index);\n    });\n  }\n\n  function goToSlide(index) {\n    if (index < 0) index = slides.length - 1;\n    if (index >= slides.length) index = 0;\n    currentIndex = index;\n    slider.style.transform = `translateX(-${100 * index}%)`;\n    updateDots(index);\n  }\n\n  if (prevBtn) prevBtn.addEventListener('click', () => goToSlide(currentIndex - 1));\n  if (nextBtn) nextBtn.addEventListener('click', () => goToSlide(currentIndex + 1));\n\n  createDots();\n  goToSlide(0);\n}\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$gEjZb","$6AR8M","$ilpIi","document","addEventListener","console","log","nombreSpan","getElementById","apellidosSpan","emailSpan","connectBankButton","linkedAccountsMessage","accountsListContainer","accountsLoaded","apiUrl","window","location","hostname","fetchAndInitializePlaidLink","updateToken","auth","currentUser","payload","userId","uid","accessToken","linkToken","res","fetch","method","headers","body","JSON","stringify","ok","data","json","link_token","$f7f7823eed57e60e$var$plaidLinkHandler","Plaid","create","token","onSuccess","public_token","metadata","alert","reload","errorData","message","error","onExit","onEvent","eventName","onAuthStateChanged","user","userDoc","getDoc","doc","db","exists","userData","textContent","firstName","lastName","email","accounts","plaid","length","style","display","index","account","entries","details","status","accountDiv","createElement","classList","add","innerHTML","querySelector","open","appendChild","accountDetails","institutionDetails","institution","name","$f7f7823eed57e60e$var$initSlider","slider","slides","querySelectorAll","prevBtn","nextBtn","dotsContainer","currentIndex","goToSlide","transform","dots","forEach","dot","i","toggle"],"version":3,"file":"profile.35468fa6.js.map"}