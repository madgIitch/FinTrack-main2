{"mappings":"AAAA,uBAAuB;AAEvB,KAAK,gBAAgB,CAAC,WAAW,CAAC;IAChC,QAAQ,GAAG,CAAC;IACZ,KAAK,WAAW;AAClB;AAEA,KAAK,gBAAgB,CAAC,YAAY,CAAC;IACjC,QAAQ,GAAG,CAAC;IACZ,OAAO,KAAK,OAAO,CAAC,KAAK;AAC3B;AAEA,2BAA2B;AAC3B,KAAK,gBAAgB,CAAC,gBAAgB,CAAC;IACrC,IAAI,MAAM,GAAG,KAAK,qBAAqB;QACrC,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,CAAC;IAClB;AACF;AAEA,eAAe;IACb,IAAI;QACF,MAAM,MAAM,MAAM;QAClB,IAAI,CAAC,KAAK;YACR,QAAQ,IAAI,CAAC;YACb;QACF;QAEA,MAAM,SAAS,KAAK,QAAQ,CAAC,QAAQ,KAAK,cACtC,yDACA;QAEJ,MAAM,MAAM,GAAG,OAAO,kCAAkC,CAAC,EAAE;YACzD,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBAAE,QAAQ;YAAI;QACrC;QAEA,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,8BAA8B;IAC9C;AACF;AAEA,SAAS;IACP,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,MAAM,MAAM,UAAU,IAAI,CAAC,eAAe;QAC1C,IAAI,SAAS,GAAG;YACd,MAAM,KAAK,IAAI,MAAM;YACrB,MAAM,KAAK,GAAG,WAAW,CAAC,YAAY;YACtC,MAAM,QAAQ,GAAG,WAAW,CAAC;YAC7B,MAAM,SAAS,MAAM,GAAG,CAAC;YACzB,OAAO,SAAS,GAAG;gBACjB,QAAQ,OAAO,MAAM,IAAI;gBACzB,GAAG,KAAK;YACV;YACA,OAAO,OAAO,GAAG,IAAM,OAAO,OAAO,KAAK;QAC5C;QACA,IAAI,OAAO,GAAG,IAAM,OAAO,IAAI,KAAK;IACtC;AACF","sources":["js/service-worker.js"],"sourcesContent":["// js/service-worker.js\n\nself.addEventListener('install', (event) => {\n  console.log('[SW] Instalado');\n  self.skipWaiting();\n});\n\nself.addEventListener('activate', (event) => {\n  console.log('[SW] Activado');\n  return self.clients.claim();\n});\n\n// Periodic Background Sync\nself.addEventListener('periodicsync', (event) => {\n  if (event.tag === 'sync-transactions') {\n    console.log('[SW] periodicSync event recibido');\n    event.waitUntil(syncTransactionsFromWorker());\n  }\n});\n\nasync function syncTransactionsFromWorker() {\n  try {\n    const uid = await getUIDFromIndexedDB();\n    if (!uid) {\n      console.warn('[SW] No hay UID para sincronizar');\n      return;\n    }\n\n    const apiUrl = self.location.hostname === 'localhost'\n      ? 'http://localhost:5001/fintrack-1bced/us-central1/api'\n      : 'https://us-central1-fintrack-1bced.cloudfunctions.net/api';\n\n    await fetch(`${apiUrl}/plaid/sync_transactions_and_store`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ userId: uid })\n    });\n\n    console.log('[SW] Sincronización periódica completada');\n  } catch (e) {\n    console.error('[SW] Error al sincronizar:', e);\n  }\n}\n\nfunction getUIDFromIndexedDB() {\n  return new Promise((resolve, reject) => {\n    const req = indexedDB.open('fintrack-db', 1);\n    req.onsuccess = () => {\n      const db = req.result;\n      const tx = db.transaction('metadata', 'readonly');\n      const store = tx.objectStore('metadata');\n      const getReq = store.get('userId');\n      getReq.onsuccess = () => {\n        resolve(getReq.result || null);\n        db.close();\n      };\n      getReq.onerror = () => reject(getReq.error);\n    };\n    req.onerror = () => reject(req.error);\n  });\n}\n"],"names":[],"version":3,"file":"service-worker.js.map","sourceRoot":"/__parcel_source_root/"}